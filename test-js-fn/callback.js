const {promisify} = require('bluebird');
const request = promisify(require('request'));
const jwtVerify = promisify(require('jsonwebtoken').verify);
const jwtDecode = require('jsonwebtoken').decode;

//The IAM token url to obtain access token for CIS.
const iamTokenUrl = 'https://iam.cloud.ibm.com/identity/token';

/**
 * Get the public key used to verify that the notification payload is generated by your Certificate Manager instance.
 * @param body
 * @returns {Promise<CryptoKey | string>}
 */
async function getPublicKey(body, certificateManagerApiUrl) {

    const keysOptions = {
        method: 'GET',
        url: `${certificateManagerApiUrl}/api/v1/instances/${encodeURIComponent(body.instance_crn)}/notifications/publicKey?keyFormat=pem`,
        headers: {
            'cache-control': 'no-cache'
        }
    };

    const keysResponse = await request(keysOptions);
    if (keysResponse.statusCode === 200)
        return JSON.parse(keysResponse.body).publicKey;
    else {
        console.error(`Couldn't get the public key for instance ${body.instance_crn} . Reason is: ${JSON.stringify(keysResponse.body)}`);
        throw new Error(`Couldn't get the public key for instance ${body.instance_crn}`);
    }
}

/**
 *
 * main() will be run when you invoke this action
 *
 * @param params Cloud Functions actions accept a single parameter, which must be a JSON object.
 *
 * @return The output of this action, which must be a JSON object.
 *
 */
async function main(params) {
    console.log("Demo: cloud function invoked.");
    try {

        const body = jwtDecode(params.data);

        // Validate that the notification was sent from a Certificate Manager instance that has allowed access
        if (!params.allowedCertificateManagerCRNs || !params.allowedCertificateManagerCRNs[body.instance_crn]) {
            console.error(`Certificate Manager instance ${body.instance_crn} is not in allowed to invoke this action`);
            return Promise.reject({
                statusCode: 403,
                headers: {'Content-Type': 'application/json'},
                body: {message: 'Unauthorized'},
            });
        }

        const certificateManagerApiUrl = `https://${params.cmRegion}.certificate-manager.cloud.ibm.com`;

        const publicKey = await getPublicKey(body, certificateManagerApiUrl);
        const decodedNotification = await jwtVerify(params.data, publicKey);

        console.log(`Notification message body: ${JSON.stringify(decodedNotification)}`);

        //The CIS instance CRN  TODO use the correct internet service crn.
        const cisCrn = 'crn:v1:bluemix:public:internet-svcs:global:a/<YOUR_ACCOUNT_ID>:<YOUR_INSTANCE_ID>';

        //The base CIS url.
        const baseCisUrl = `https://api.cis.cloud.ibm.com/v1/${encodeURIComponent(params.cisCrn)}`;

        switch (decodedNotification.event_type) {
            // Handle other certificate manager event types.
            // ...

            // Handling domain validation event types.
            case "cert_domain_validation_required":
                await setChallenge(decodedNotification, params.iamApiKey, baseCisUrl);
                break;
            case "cert_domain_validation_completed":
                await removeChallenge(decodedNotification, params.iamApiKey, baseCisUrl);
                break;
        }

    } catch (err) {
        console.error(`Action failed. Reason:${typeof err.message === 'string' ? err.message : JSON.stringify(err)}`);
        return Promise.reject({
            statusCode: err.statusCode ? err.statusCode : 500,
            headers: {'Content-Type': 'application/json'},
            body: {message: err.message ? err.message : 'Error processing your request'},
        });
    }
    return {
        statusCode: 200,
        headers: {'Content-Type': 'application/json'},
        body: {}
    };

}

/**
 * Obtain access token from IAM
 * @param iamApiKey
 * @returns {Promise<*>}
 */
const obtainAccessToken = async (iamApiKey) => {

    const options = {
        method: 'POST',
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept': 'application/json'
        },
        body: `grant_type=urn%3Aibm%3Aparams%3Aoauth%3Agrant-type%3Aapikey&apikey=${iamApiKey}&response_type=cloud_iam`,
        uri: iamTokenUrl
    };

    try {
        const response = await request(options);
        const body = JSON.parse(response.body);
        if (response.statusCode === 200 && body['access_token']) {
            return body['access_token'];
        }
        console.error(`Couldn't obtain access token. Reason is: status:${response.statusCode} response headers are: ${JSON.stringify(response.headers)} and body: ${JSON.stringify(response.body)}`);
        throw {
            'statusCode': 503,
            'message': 'Error obtaining access token'
        };
    } catch (error) {
        console.error(`Couldn't obtain access token. Reason is: ${error.message ? error.message : JSON.stringify(error)}`);
        throw {
            'statusCode': 500,
            'message': 'Error obtaining access token'
        };
    }

};
